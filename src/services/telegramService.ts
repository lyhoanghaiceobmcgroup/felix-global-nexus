interface CheckInData {
  fullName: string;
  phoneNumber: string;
  industry: string;
  attendeeType: string;
  invitedBy?: string;
  location: {
    latitude: number;
    longitude: number;
    address: string;
  } | null;
  timestamp: string;
}

const TELEGRAM_BOT_TOKEN = import.meta.env.VITE_TELEGRAM_BOT_TOKEN;
const MEMBER_GROUP_ID = import.meta.env.VITE_TELEGRAM_MEMBER_GROUP_ID; // Cho th√†nh vi√™n
const GUEST_GROUP_ID = import.meta.env.VITE_TELEGRAM_GUEST_GROUP_ID; // Cho kh√°ch m·ªùi, kh√°ch thƒÉm, kh√°ch ƒë·∫∑c bi·ªát

// H√†m x√°c ƒë·ªãnh group ID d·ª±a tr√™n lo·∫°i ng∆∞·ªùi tham d·ª±
const getGroupIdByAttendeeType = (attendeeType: string): string => {
  if (attendeeType === 'Th√†nh vi√™n') {
    return MEMBER_GROUP_ID;
  }
  // Kh√°ch m·ªùi, Kh√°ch thƒÉm, Kh√°ch ƒë·∫∑c bi·ªát
  return GUEST_GROUP_ID;
};

export const sendCheckInToTelegram = async (data: CheckInData): Promise<boolean> => {
  try {
    console.log('Starting Telegram send process...');
    console.log('Environment check:');
    console.log('- VITE_TELEGRAM_BOT_TOKEN exists:', !!TELEGRAM_BOT_TOKEN);
    console.log('- VITE_TELEGRAM_MEMBER_GROUP_ID exists:', !!MEMBER_GROUP_ID);
    console.log('- VITE_TELEGRAM_GUEST_GROUP_ID exists:', !!GUEST_GROUP_ID);
    console.log('- Bot token value:', TELEGRAM_BOT_TOKEN ? `${TELEGRAM_BOT_TOKEN.substring(0, 10)}...` : 'undefined');
    console.log('- Member group ID:', MEMBER_GROUP_ID);
    console.log('- Guest group ID:', GUEST_GROUP_ID);
    console.log('- All import.meta.env:', import.meta.env);
    
    if (!TELEGRAM_BOT_TOKEN) {
      console.error('Telegram bot token is missing');
      return false;
    }
    
    const groupId = getGroupIdByAttendeeType(data.attendeeType);
    console.log('Selected group ID:', groupId);
    
    if (!groupId) {
      console.error('Group ID is missing');
      return false;
    }
    
    let message = `üéØ TH√îNG B√ÅO CHECK-IN TH√ÄNH C√îNG\n\n` +
       `üë§ H·ªç t√™n: ${data.fullName}\n` +
       `üì± S·ªë ƒëi·ªán tho·∫°i: ${data.phoneNumber}\n` +
       `üè¢ Ng√†nh ngh·ªÅ: ${data.industry}\n` +
       `üë• Lo·∫°i tham d·ª±: ${data.attendeeType}\n`;
     
     if (data.invitedBy && data.invitedBy.trim()) {
       message += `ü§ù Kh√°ch c·ªßa: ${data.invitedBy}\n`;
     }
    
    if (data.location) {
      message += `üìç V·ªã tr√≠: ${data.location.latitude}, ${data.location.longitude}\n`;
      if (data.location.address) {
        message += `üó∫Ô∏è ƒê·ªãa ch·ªâ: ${data.location.address}\n`;
      }
    } else {
      message += `üìç V·ªã tr√≠: Kh√¥ng c√≥ d·ªØ li·ªáu v·ªã tr√≠\n`;
    }
    
    message += `‚è∞ Th·ªùi gian: ${data.timestamp}\n\n` +
      `‚úÖ Check-in th√†nh c√¥ng cho bu·ªïi h·ªçp BNI FELIX Chapter!`;

    console.log('Sending message to Telegram...');
    console.log('Message length:', message.length);
    
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: groupId,
        text: message,
        parse_mode: 'HTML'
      })
    });

    console.log('Response status:', response.status);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('Telegram API error response:', errorText);
      throw new Error(`Telegram API error: ${response.status} - ${errorText}`);
    }

    const result = await response.json();
    console.log('Telegram API result:', result);
    return result.ok;
  } catch (error) {
    console.error('Error sending message to Telegram:', error);
    return false;
  }
};

export const getCurrentLocation = (): Promise<GeolocationPosition> => {
  return new Promise((resolve, reject) => {
    if (!navigator.geolocation) {
      reject(new Error('Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ ƒë·ªãnh v·ªã GPS'));
      return;
    }

    // Th·ª≠ v·ªõi ƒë·ªô ch√≠nh x√°c cao tr∆∞·ªõc
    navigator.geolocation.getCurrentPosition(
      (position) => resolve(position),
      (error) => {
        // N·∫øu l·ªói, th·ª≠ l·∫°i v·ªõi c·∫•u h√¨nh √≠t nghi√™m ng·∫∑t h∆°n
        navigator.geolocation.getCurrentPosition(
          (position) => resolve(position),
          (fallbackError) => {
            let errorMessage = 'Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠';
            switch(fallbackError.code) {
              case fallbackError.PERMISSION_DENIED:
                errorMessage = 'Ng∆∞·ªùi d√πng t·ª´ ch·ªëi quy·ªÅn truy c·∫≠p v·ªã tr√≠';
                break;
              case fallbackError.POSITION_UNAVAILABLE:
                errorMessage = 'Th√¥ng tin v·ªã tr√≠ kh√¥ng kh·∫£ d·ª•ng';
                break;
              case fallbackError.TIMEOUT:
                errorMessage = 'H·∫øt th·ªùi gian ch·ªù l·∫•y v·ªã tr√≠';
                break;
            }
            reject(new Error(errorMessage));
          },
          {
            enableHighAccuracy: false,
            timeout: 15000,
            maximumAge: 300000 // 5 ph√∫t
          }
        );
      },
      {
        enableHighAccuracy: true,
        timeout: 8000,
        maximumAge: 60000 // 1 ph√∫t
      }
    );
  });
};

export const getAddressFromCoordinates = async (lat: number, lng: number): Promise<string> => {
  try {
    // Using a free geocoding service (you might want to use Google Maps API for better results)
    const apiUrl = import.meta.env.VITE_GEOCODING_API_URL || 'https://api.bigdatacloud.net/data/reverse-geocode-client';
    const response = await fetch(`${apiUrl}?latitude=${lat}&longitude=${lng}&localityLanguage=vi`);
    const data = await response.json();
    return data.display_name || `${lat}, ${lng}`;
  } catch (error) {
    console.error('Error getting address:', error);
    return `${lat}, ${lng}`;
  }
};